// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LSM_PGD_Cpp
Rcpp::List LSM_PGD_Cpp(const Eigen::Map<Eigen::MatrixXd>& A, Eigen::MatrixXd Z, Eigen::VectorXd alpha, double step_size_z, double step_size_alpha, int niter, bool trace);
RcppExport SEXP _randnet_LSM_PGD_Cpp(SEXP ASEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP step_size_zSEXP, SEXP step_size_alphaSEXP, SEXP niterSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_z(step_size_zSEXP);
    Rcpp::traits::input_parameter< double >::type step_size_alpha(step_size_alphaSEXP);
    Rcpp::traits::input_parameter< int >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(LSM_PGD_Cpp(A, Z, alpha, step_size_z, step_size_alpha, niter, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_randnet_LSM_PGD_Cpp", (DL_FUNC) &_randnet_LSM_PGD_Cpp, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_randnet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
